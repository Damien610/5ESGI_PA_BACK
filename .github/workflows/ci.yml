name: Python CI

on:
  push:
    branches: ['**']
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    # main (push ou PR->main) => production ; sinon => staging
    environment: ${{ (
        (github.event_name == 'pull_request' && github.base_ref == 'main') || github.ref == 'refs/heads/main'
      ) && 'production' || 'staging' }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        # pas de ports n√©cessaires

    # ‚ö†Ô∏è CI = DB √©ph√©m√®re du service ci-dessus ‚Üí utilise ces valeurs fixes
    env:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: test_db
      POSTGRES_HOST: postgres     # üëà le hostname du service, PAS un secret
      POSTGRES_PORT: '5432'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install alembic

      - name: Debug (temporaire)
        run: |
          echo "event=${{ github.event_name }}"
          echo "ref=${{ github.ref }}"
          echo "base_ref=${{ github.base_ref }}"
          echo "ENV s√©lectionn√©=${{ (
            (github.event_name == 'pull_request' && github.base_ref == 'main') || github.ref == 'refs/heads/main'
          ) && 'production' || 'staging' }}"
          echo "POSTGRES_HOST=$POSTGRES_HOST"
          echo "POSTGRES_PORT=$POSTGRES_PORT"

      - name: Run Alembic migrations
        run: alembic -c alembic.ini upgrade head
        env:
          # URL compl√®te = z√©ro surprise
          DATABASE_URL: postgresql+psycopg2://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
          PYTHONPATH: ${{ github.workspace }}

      - name: Run tests
        run: pytest tests

      # Secrets uniquement pour Docker Hub (li√©s √† l'environnement s√©lectionn√©)
      - name: Log in to Docker Hub
        if: success()
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Build/push staging pour tout sauf main
      - name: Build & Push Docker Staging image
        if: success() && github.ref != 'refs/heads/main' && !(github.event_name == 'pull_request' && github.base_ref == 'main')
        run: |
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          DATE_TAG=$(date +'%Y%m%d-%H%M')
          IMAGE_NAME="pa-2025-2026-test"
          docker build -t $DOCKER_USERNAME/$IMAGE_NAME:$DATE_TAG -t $DOCKER_USERNAME/$IMAGE_NAME:latest -f Dockerfile .
          docker push $DOCKER_USERNAME/$IMAGE_NAME:$DATE_TAG
          docker push $DOCKER_USERNAME/$IMAGE_NAME:latest

      # Build/push prod seulement pour main
      - name: Build & Push Docker Production image
        if: success() && (github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main'))
        run: |
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          DATE_TAG=$(date +'%Y%m%d-%H%M')
          IMAGE_NAME="pa-2025-2026"
          docker build -t $DOCKER_USERNAME/$IMAGE_NAME:$DATE_TAG -t $DOCKER_USERNAME/$IMAGE_NAME:latest -f Dockerfile.prod .
          docker push $DOCKER_USERNAME/$IMAGE_NAME:$DATE_TAG
          docker push $DOCKER_USERNAME/$IMAGE_NAME:latest
